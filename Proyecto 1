# cargamos el archivo excel a google colab
from google.colab import files
uploaded = files.upload()

# utilizamos bibliotecas 
import pandas as pd
import networkx as nx

# archivo de excel 
def leer_archivo(arch_excel):
  archivo_excel = "/content/Creacion_de_la_carrera_de_mat_ap.xlsx"
  arch = pd.read_excel(arch_excel)
  return arch

def extraer_columnas(datos):
    actividades = datos["Actividad"]
    precedentes = datos["Precedentes"]
    duracion = datos["Duracion"]
    return (actividades, precedentes, duracion)

# clase directed graph 
class Directed_graph:

  def __init__(self):
    self.nodos = []
    self.arcos = []

  def len_arcos(self):
    return len(self.arcos)

  def len_nodos(self):
    return len(self.nodos)

  def antecesores(self,nodo):
    if nodo not in self.nodos:
      print(nodo," no pertenece al conjunto de nodos")
      return []
    else:
      Ant = []
      for x in self.arcos:
        if nodo == x[-1]:
          Ant.append(x[0])
      return Ant

  def sucesores(self,nodo):
    if nodo not in self.nodos:
      print(nodo," no pertenece al conjunto de nodos")
      return []
    else:
      Ant = []
      for x in self.arcos:
        if nodo == x[0]:
          Ant.append(x[-1])
      return Ant

  def add_vertex(self, nodo):
    self.nodos.append(nodo)

  def add_arc(self, arco):
    if type(arco) == tuple and len(arco) == 2:
      if arco[0] in self.nodos and arco[1] in self.nodos:
        self.arcos.append(arco)
      else:
        print("Las entradas no pertenecen a los nodos.")
    else:
      print("El arco no es valido.")

# clase arista
class Arista:
    def __init__(self, origen, destino, peso=None):
        self.origen = origen
        self.destino = destino
        self.peso = peso

# clase grafica 
class Grafica:
    def __init__(self):
        self.nodos = set()
        self.aristas = []

    def agregar_nodo(self, nodo):
        self.nodos.add(nodo)

    def agregar_arista(self, arista):
        self.aristas.append(arista)
# clase arco
class Arco:
    def __init__(self, origen, destino, peso=None):
        self.origen = origen
        self.destino = destino
        self.peso = peso

# Crear el grafo dirigido
G = nx.DiGraph()

# Agregar nodos y aristas al grafo (como se hizo anteriormente)

# Agregar nodos al grafo
activities = [ (1, "Decision preliminar"),
 (2, "Determinacion y analisis de objetivos"),
 (3, "Sugerencia del plan de estudios"),
 (4, "Presentacion de la propuesta"),
 (5, "Consulta con el sector academico del departamento de matematicas"),
 (6, "Consulta con el sector academico de la UNAM"),
 (7, "Consulta con el sector academico de otras instituciones academicas"),
 (8, "Consulta con el sector academico de otras instituciones no academicas"),
 (9, "Consulta con el sector administrativo de la UNAM"),
 (10, "Analisis, discusion e incorporacion de sugerencias del departamento de matematicas"),
 (11, "Analisis, discusion e incorporacion de sugerencias de la UNAM"),
 (12, "Analisis, discusion e incorporacion de sugerencias de instituciones academicas"),
 (13, "Analisis, discusion e incorporacion de sugerencias de instituciones no academicas"),
 (14, "Analisis comparativo de planes similares en la UNAM"),
 (15, "Adicion de consideraciones nacionales"),
 (16, "Adicion de consideraciones internacionales"),
 (17, "Elaboracion del documento administrativo"),
 (18, "Presentacion en el consejo tecnico de la Facultad de Ciencias"),
 (19, "Observaciones del consejo tecnico"),
 (20, "Elaboracion del plan de estudios final"),
 (21, "Presentacion de propuesta definitiva a consejos tecnicos y de area")]

for activity in activities:
    G.add_node(activity[0], label=activity[1])

# Agregar aristas 
edges = [(1, 3),(2, 3),(3, 4),(4, 5),(4, 6),(4, 7),(4, 8),(4, 9),(5, 10),(6, 11),(7, 12),(8, 13),(10, 14),(10, 15),(11, 14),(12, 16),(13, 16),(15, 17),(16, 17),(17, 18),(18, 19),(19, 20),(20, 21)]

G.add_edges_from(edges)

# Ordenamiento topológico
topological_order = list(nx.topological_sort(G))
print("Ordenamiento topológico de las actividades:")
for activity in topological_order:
    print(activity, G.nodes[activity]['label'])

# clase de actividades criticas 
class ActividadesCriticas:
    def __init__(self, grafica, fecha_mas_proxima, fecha_mas_lejana):
        self.grafica = grafica
        self.fecha_mas_proxima = fecha_mas_proxima
        self.fecha_mas_lejana = fecha_mas_lejana

# definimos el calculo de holguras 
    def calcular_holguras(self):
        holguras = {}
        for arista in self.grafica.aristas:
            holgura = self.fecha_mas_lejana[arista.destino] - self.fecha_mas_proxima[arista.origen]
            holguras[arista] = holgura
        return holguras

# actividades criticas
    def calcular_actividades_criticas(self):
        holguras = self.calcular_holguras()
        actividades_criticas = []
        for arista, holgura in holguras.items():
            if holgura == 0:
                actividades_criticas.append(arista)
        return actividades_criticas

# reporte txt
def generar_reporte(duracion_total, actividades, descripciones):
    with open('Proyecto_1_.txt', 'w') as file:
        file.write(f'El tiempo necesario para la elaboracion del proyecto es de {duracion_total} semanas.\n\n')
        file.write('Las actividades criticas son:\n')
        for actividad, descripcion in zip(actividades, descripciones):
            file.write(f'- {actividad}: {descripcion}\n')
        file.close()  


def main():
    # recuperar datos
    infile = '/content/Creacion_de_la_carrera_de_mat_ap.xlsx'
    datos = leer_archivo(infile)
    act, prec, dur = extraer_columnas(datos)
    descripciones = datos["Descripcion"]  

    g = Directed_graph()

    for actividad in act:
        g.nodos.append(actividad)

    for i in range(len(act)):
        precedentes = prec[i].split(", ") if isinstance(prec[i], str) else []
        for precedente in precedentes:
            g.arcos.append(Arco(precedente, act[i], 0)) 

    # Calcular la duración total del proyecto
    duracion_total = sum(dur.tolist())

    # generar el archivo 
    actividades = [actividad for actividad in act]
    generar_reporte(duracion_total, actividades, descripciones)
  
if __name__ == "__main__":
    main()

  

